@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@using System.Security.Claims
@using Blogifier.Shared
@using Blogifier.Services
@using System.Collections.Generic

@implements IDisposable

@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory
@inject IMessageService _commentsRenderTrigger
@inject AuthenticationStateProvider _stateProvider
@inject IHttpContextAccessor _contextAccessor

@if (CurrentUser.Identity.IsAuthenticated)
{
    if (!ShowMainEditorDone)
    {
        <CommentEditor PostSlug="@PostSlug" PostId="@PostId" Toolbar="@Toolbar">
        </CommentEditor>
    }
}
else
{
    <FakeEditor CurrentPath="@CurrentPath"></FakeEditor>
}

@if (CommentDTOs is not null)
{
    if (CommentDTOs.Count > 0)
    {
        foreach (var commentTree in CommentDTOs)
        {
            <div class="container border-0 p-0">
                <div class="row">
                    <CommentCard Comment="@commentTree.MainComment" />
                </div>
                @if (commentTree.SubComments.Count > 0)
                {
                    foreach (var subComment in commentTree.SubComments)
                    {
                        <p></p>
                        <div class="row">
                            <div class="col-md-1 col-sm-1 col-lg-1"></div>
                            <CommentCard Comment="@subComment" />
                        </div>
                    }
                }
            </div>
            <p></p>
            @if (ShowSubEditor && (commentTree.MainComment.Id == EditorForId))
            {
                if (CurrentUser.Identity.IsAuthenticated)
                {
                    if (ShowSubEditorbyContent)
                    {
                        <CommentEditor PostSlug="@PostSlug" PostId="@PostId" Toolbar="@Toolbar" ParentCommentId="@EditorForId.Value"
    CurrentCommentId="@CurrentCommentId.Value">
                        </CommentEditor>
                        @* <CommentEditor PostSlug="@PostSlug" PostId="@PostId" Toolbar="@Toolbar" ParentCommentId="@EditorForId.Value">
                            </CommentEditor> *@
                    }
                    else
                    {
                        <CommentEditor PostSlug="@PostSlug" PostId="@PostId" Toolbar="@Toolbar" ParentCommentId="@EditorForId.Value">
                        </CommentEditor>
                    }
                }
                else
                {
                    <FakeEditor CurrentPath="@CurrentPath"></FakeEditor>
                }
            }
        }
    }
    else
    {
        <p></p>
    }

}

@code {
    [Parameter] public string PostSlug { get; set; }
    [Parameter] public string CurrentPath { get; set; }
    [Parameter] public string Toolbar { get; set; }
    [Parameter] public int PostId { get; set; }
    private ClaimsPrincipal CurrentUser { get; set; }
    public List<CommentDTO> CommentDTOs { get; set; }
    public string Content { get; set; } = string.Empty;
    public HttpResponseMessage responseMessage { get; set; }
    private HttpClient _http { get; set; }
    private bool ShowSubEditor { get; set; } = false;
    private bool ShowSubEditorbyContent { get; set; } = false;
    //private bool ShowFakeEditor { get; set; } = false;
    private long? EditorForId { get; set; } = null;
    private long? CurrentCommentId { get; set; } = null;
    private bool ShowMainEditorDone { get; set; } = false;
    private string textAreaId { get; set; }
    //private string contentNeedChange { get; set; } = null;
    protected override async Task OnInitializedAsync()
    {
        _commentsRenderTrigger.OnMessage += MessageHandler;
        var authState = await _stateProvider.GetAuthenticationStateAsync();
        CurrentUser = authState.User;
        await Load();
    }
    public void Dispose()
    {
        _commentsRenderTrigger.OnMessage -= MessageHandler;
    }

    protected async Task Load()
    {
        //ShowMainEditor = true;
        _http = ClientFactory.CreateClient("Local");
        CommentDTOs = await _http.GetFromJsonAsync<List<CommentDTO>>($"api/comment/get/{PostSlug}");
        if (CurrentUser.Identity.IsAuthenticated)
        {
            List<string> cookieCollection = new List<string>();
            foreach (var cookie in _contextAccessor.HttpContext.Request.Cookies)
            {
                cookieCollection.Add(cookie.Key + "=" + cookie.Value);
            }
            _http.DefaultRequestHeaders.Add("Cookie", string.Join(";", string.Join(";", cookieCollection)));
        }
    }

    private async Task MessageHandler(string message, long commentIdforPosition, long commentId)
    {
        if (String.Equals(message, Constants.ComponentUpdate))
        {
            CommentDTOs = await _http.GetFromJsonAsync<List<CommentDTO>>($"api/comment/get/{PostSlug}");
            ShowSubEditor = false;
        }
        if (String.Equals(message, Constants.ComponentShowEditor))
        {
            ShowSubEditor = true;
            ShowMainEditorDone = false;
            EditorForId = commentIdforPosition;
            textAreaId = $"comment-{EditorForId}";
        }
        if (String.Equals(message, Constants.ComponentShowEditorbyContent))
        {
            ShowSubEditor = true;
            ShowMainEditorDone = false;
            EditorForId = commentIdforPosition;
            textAreaId = $"comment-{EditorForId}";
            ShowSubEditorbyContent = true;
            CurrentCommentId = commentId;

        }
        if (String.Equals(message, Constants.HideSubEditor))
        {
            ShowSubEditor = false;
        }
        StateHasChanged();
    }

    protected async Task AlertDeBug(string info)
    {
        await JSRuntime.InvokeVoidAsync("commonJsFunctions.tempAlert", info);
    }
}