@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@using Blogifier.Shared
@using Blogifier.Services
@using System.Collections.Generic

@implements IDisposable

@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory
@inject IMessageService _commentsRenderTrigger


@if (CommentDTOs is not null)
{
    if (CommentDTOs.Count > 0)
    {
        foreach (var comment in CommentDTOs)
        {
            <div class="container border-0 p-0">
                <div class="row">
                    <CommentCard Comment="@comment.MainComment" />
                </div>
                @if (comment.SubComments.Count > 0)
                {
                    foreach (var subComment in comment.SubComments)
                    {
                        <p></p>
                        <div class="row">
                            @* <div class="col-md-1 col-sm-1 mt-2"></div> *@
                            <div class="col-md-1 col-sm-1 col-lg-1"></div>
                            <CommentCard Comment="@subComment" />
                        </div>
                    }
                }
@* 本页放活动的Editor，点击主回复或者相应的附带回复，Editor出现在每个主回复下方 *@
            </div>
            <p></p>
        }
    }
    else
    {
        <p></p>
    }

}

@code {
    [Parameter] public string PostSlug { get; set; }
    private ClaimsPrincipal CurrentUser { get; set; }
    public List<CommentDTO> CommentDTOs { get; set; }
    public string HttpBase { get; set; }
    public HttpResponseMessage responseMessage { get; set; }
    private HttpClient _http { get; set; }
    protected override async Task OnInitializedAsync()
    {
        _commentsRenderTrigger.OnMessage += MessageHandler;
        await Load();
    }
    public void Dispose()
    {
        // unsubscribe from OnMessage event
        _commentsRenderTrigger.OnMessage -= MessageHandler;
    }

    protected async Task Load()
    {
        _http = ClientFactory.CreateClient("Local");
        // HttpBase = _http.BaseAddress.ToString();
        //responseMessage = await _http.GetAsync("api/comment/" + PostSlug);

        CommentDTOs = await _http.GetFromJsonAsync<List<CommentDTO>>("api/comment/get/" + PostSlug);
    }

    private async Task MessageHandler(string message)
    {
        CommentDTOs = await _http.GetFromJsonAsync<List<CommentDTO>>("api/comment/get/" + PostSlug);
        // await InvokeAsync(() => { StateHasChanged(); });
        StateHasChanged();
    }
}