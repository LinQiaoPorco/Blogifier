@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Blogifier.Shared
@using Blogifier.Services
@using System.Collections.Generic

@implements IDisposable

@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory
@* @inject AuthenticationStateProvider AuthenticationStateProvider *@
@* @inject AuthenticationStateProvider BlogifierServerAuthStateProvider *@
@inject IMessageService _commentsRenderTrigger

<p>Text from Blazor Comments Show Component</p>
<p>Slug=> @PostSlug</p>

@if (CommentDTOs is not null)
{
    if (CommentDTOs.Count > 0)
    {
        foreach (var comment in CommentDTOs)
        {
            <p>@comment.MainComment.CommentContent</p>
        }
    }
    else
    {
        <p> No comments yet</p>
    }

}

@* <p>@responseMessage.StatusCode.ToString()</p> *@

@code {
    [Parameter] public string PostSlug { get; set; }
    private ClaimsPrincipal CurrentUser { get; set; }
    public List<CommentDTO> CommentDTOs { get; set; }
    public string HttpBase { get; set; }
    public HttpResponseMessage responseMessage { get; set; }
    private HttpClient _http { get; set; }
    protected override async Task OnInitializedAsync()
    {
        _commentsRenderTrigger.OnMessage += MessageHandler;
        await Load();
    }
    public void Dispose()
    {
        // unsubscribe from OnMessage event
        _commentsRenderTrigger.OnMessage -= MessageHandler;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("commonJsFunctions.tempAlert", "First Rendered");
        }
        await JSRuntime.InvokeVoidAsync("commonJsFunctions.tempAlert", "Not First Rendered");
    }

    protected async Task Load()
    {
        _http = ClientFactory.CreateClient("Local");
        // HttpBase = _http.BaseAddress.ToString();
        //responseMessage = await _http.GetAsync("api/comment/" + PostSlug);

        CommentDTOs = await _http.GetFromJsonAsync<List<CommentDTO>>("api/comment/" + PostSlug);
    }

    private async Task MessageHandler(string message)
    {
        CommentDTOs = await _http.GetFromJsonAsync<List<CommentDTO>>("api/comment/" + PostSlug);
        // await InvokeAsync(() => { StateHasChanged(); });
        StateHasChanged();
    }
}