@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Localization
@using System.Security.Claims
@using Blogifier.Shared
@using Blogifier.Services
@using Blogifier.Shared.Resources
@using System.Net.Http.Headers
@using System.Net.Http
@using IdentityModel

@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory
@inject IStringLocalizer<Resource> _localizer
@inject IMessageService _commentsRenderTrigger
@inject AuthenticationStateProvider StateProvider
@inject IHttpContextAccessor _contextAccessor

<CascadingAuthenticationState>

    <AuthorizeView>
        <Authorized>
            <div class="container mb-3">
                <div class="row mb-2">
                    <textarea rows="10" cols="100" id="comment-area"> </textarea>
                </div>
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="button" class="btn" style="background-color: #622aff; color: #ffffff"
                        @onclick="() => UploadComment()">@_localizer["comment"]</button>
                    <button type="button" class="btn btn-outline-dark" @onclick="() => CancelUpload()"
                        @onclick:preventDefault>@_localizer["cancel"]</button>
                </div>
            </div>

        </Authorized>
        <NotAuthorized>
            <p>---------------Non-Authorized in Editor-------------------</p>
        </NotAuthorized>

    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Parameter] public string PostSlug { get; set; }
    [Parameter] public string Content { get; set; }
    [Parameter] public string Toolbar { get; set; }
    [Parameter] public int PostId { get; set; }
    protected Comment Comment { get; set; }
    public string HttpBase { get; set; }
    public ClaimsPrincipal CurrentUser { get; set; }
    private HttpClient _http { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await StateProvider.GetAuthenticationStateAsync();
        CurrentUser = authState.User;
        await Load();
    }

    protected async Task Load()
    {
        _http = ClientFactory.CreateClient("Local");
        if (CurrentUser.Identity.IsAuthenticated)
        {
            List<string> cookieCollection = new List<string>();
            foreach (var cookie in _contextAccessor.HttpContext.Request.Cookies)
            {
                cookieCollection.Add(cookie.Key + "=" + cookie.Value);
            }
            _http.DefaultRequestHeaders.Add("Cookie", string.Join(";", string.Join(";", cookieCollection)));
        }
        Comment = new Comment();
        HttpBase = await Task.Run(() => _http.BaseAddress.ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>("commonJsFunctions.loadEditor", Toolbar);
            await JSRuntime.InvokeVoidAsync("commonJsFunctions.setTooltip");
        }
        await JSRuntime.InvokeAsync<string>("commonJsFunctions.setEditorValue", Content);
    }
    protected async Task SaveComment(CommentAction commentAction)
    {
        Comment.CommentContent = await JSRuntime.InvokeAsync<string>("commonJsFunctions.getEditorValue", "");
        Comment.PostId = PostId;
        Comment.PostDate = DateTime.UtcNow;
        Comment.CommentedUserId = CurrentUser.FindFirstValue(JwtClaimTypes.Subject);
        if (commentAction == CommentAction.Eidt)
        {
            Comment.UpdatedDate = DateTime.UtcNow;
            HttpResponseMessage updateResult = await _http.PutAsJsonAsync<Comment>($"api/comment/update", Comment);
            if (updateResult.IsSuccessStatusCode)
            {
                await _commentsRenderTrigger.SendMessage("refresh");
                await Load();
            }
        }
        else
        {
            HttpResponseMessage uploadResult = await _http.PostAsJsonAsync<Comment>($"api/comment/add", Comment);
            if (uploadResult.IsSuccessStatusCode)
            {
                await _commentsRenderTrigger.SendMessage("refresh");
                await Load();
            }
            else { await AlertDeBug("Fail to Upload!!!"); }
        }

    }
    protected async Task UploadComment()
    {
        await SaveComment(CommentAction.Upload);
    }
    protected async Task EditComment()
    {
        await SaveComment(CommentAction.Eidt);
    }
    protected async Task CancelUpload()
    {
        await JSRuntime.InvokeAsync<string>("commonJsFunctions.clearEditorValue", "");
    }
    protected async Task AlertDeBug(string info)
    {
        await JSRuntime.InvokeVoidAsync("commonJsFunctions.tempAlert", info);
    }

}
