@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Localization
@using System.Security.Claims
@using Blogifier.Shared
@using Blogifier.Services
@using Blogifier.Shared.Resources
@using System.Net.Http.Headers
@using System.Net.Http
@using IdentityModel
@using Microsoft.Extensions.Logging

@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory
@inject IStringLocalizer<Resource> _localizer
@inject IMessageService _commentsRenderTrigger
@inject AuthenticationStateProvider _stateProvider
@inject IHttpContextAccessor _contextAccessor
@inject ILogger<CommentCard> _logger

@if (ShowWarningModal)
{
    <WarningModal Callback="()=> {ShowWarningModal = false;StateHasChanged();}"></WarningModal>
}

<div class="container border-0 p-0">
    <div class="row mb-2">
        <div class="col-1 my-auto">
            <img src="@Avatar" class="rounded-circle mx-auto d-block float-start">
        </div>
        <div class="col">
            @if (!ParentCommentId.HasValue)
            {
                <textarea rows="5" cols="100" id="comment-main"> </textarea>
            }
            else
            {
                <textarea rows="5" cols="100" id="comment-sub"> </textarea>
            }
        </div>
    </div>
    <div class="d-grid gap-2 d-md-flex justify-content-md-end mb-2">
        @if (EditedCommentId.HasValue && LoadContent is not null)
        {
            <button type="button" class="btn" style="background-color: #622aff; color: #ffffff"
            @onclick="() => EditComment()">@_localizer["edit"]</button>
            <button type="button" class="btn btn-light" @onclick="() => CancelEdit()"
            @onclick:preventDefault>@_localizer["cancel"]</button>
        }
        else
        {
            <button type="button" class="btn" style="background-color: #622aff; color: #ffffff"
            @onclick="() => UploadComment()">@_localizer["comment"]</button>
            <button type="button" class="btn btn-light" @onclick="() => CancelUpload()"
            @onclick:preventDefault>@_localizer["cancel"]</button>
        }
    </div>
</div>
<p></p>



@code {
    [Parameter] public string PostSlug { get; set; }
    [Parameter] public string Toolbar { get; set; }
    [Parameter] public int PostId { get; set; }
    [Parameter] public long? ParentCommentId { get; set; }
    [Parameter] public long? EditedCommentId { get; set; }
    [Parameter] public string LoadContent { get; set; }
    private Comment Comment;
    public string Avatar;
    public ClaimsPrincipal CurrentUser;
    private HttpClient _httpClient;
    private string textAreaId;
    private bool ShowWarningModal = false;

    protected override async Task OnInitializedAsync()
    {
        if (ParentCommentId.HasValue)
        {
            //textAreaId = $"comment-{ParentCommentId}";
            textAreaId = $"comment-sub";
        }
        var authState = await _stateProvider.GetAuthenticationStateAsync();
        CurrentUser = authState.User;
        await Load();
    }

    protected async Task Load()
    {
        _httpClient = ClientFactory.CreateClient("Local");
        if (CurrentUser.Identity.IsAuthenticated)
        {
            List<string> cookieCollection = new List<string>();
            foreach (var cookie in _contextAccessor.HttpContext.Request.Cookies)
            {
                cookieCollection.Add(cookie.Key + "=" + cookie.Value);
            }
            _httpClient.DefaultRequestHeaders.Add("Cookie", string.Join(";", string.Join(";", cookieCollection)));
        }

        Comment = new Comment();
        var tempGuid = CurrentUser.FindFirstValue(JwtClaimTypes.Subject);
        var authorModel = await
        _httpClient.GetFromJsonAsync<CommentUserModel>($"api/author/partialinfobyguid/{tempGuid}");
        Avatar = authorModel.Avatar;
        if (!String.IsNullOrEmpty(LoadContent))
        {
            _logger.LogWarning(666, $"Content:{LoadContent}");
            _logger.LogWarning(777, $"Length:{LoadContent.Length}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (ParentCommentId.HasValue)
            {
                await JSRuntime.InvokeVoidAsync("commonJsFunctions.loadEditor", Toolbar, textAreaId);
                await JSRuntime.InvokeVoidAsync("commonJsFunctions.setTooltip");
                if (LoadContent is not null)
                {
                    await JSRuntime.InvokeVoidAsync("commonJsFunctions.setEditorValue", LoadContent, "sub");
                }
            }
            else
            {
                await JSRuntime.InvokeAsync<string>("commonJsFunctions.loadEditor", Toolbar, "");
                await JSRuntime.InvokeVoidAsync("commonJsFunctions.setTooltip");
                //await JSRuntime.InvokeAsync<string>("commonJsFunctions.setEditorValue", "", "main");
            }
        }
        else
        {
            if (!String.IsNullOrEmpty(LoadContent))
            {
                _logger.LogWarning(888, "LoadContent is not null!");
                await JSRuntime.InvokeVoidAsync("commonJsFunctions.setEditorValue", LoadContent, "sub");
            }
            else
            {
                _logger.LogWarning(999, "LoadContent is null!");
                await JSRuntime.InvokeVoidAsync("commonJsFunctions.setEditorValue", "", "sub");
            }
        }
    }
    protected async Task SaveComment(CommentAction commentAction)
    {
        HttpResponseMessage result;
        if (ParentCommentId.HasValue)
        {
            Comment.ParentId = ParentCommentId;
            Comment.CommentContent = await JSRuntime.InvokeAsync<string>("commonJsFunctions.getEditorValue", "sub");
        }
        else
        {
            Comment.CommentContent = await JSRuntime.InvokeAsync<string>("commonJsFunctions.getEditorValue", "main");
            await JSRuntime.InvokeAsync<string>("commonJsFunctions.clearEditorValue", "main");
        }
        Comment.PostId = PostId;
        Comment.CommentedUserId = CurrentUser.FindFirstValue(JwtClaimTypes.Subject);
        if (String.IsNullOrEmpty(Comment.CommentContent.Trim()))
        {
            ShowWarningModal = true;
            return;
        }
        if (commentAction == CommentAction.Eidt)
        {
            Comment.Id = EditedCommentId.Value;
            Comment.UpdatedDate = DateTime.UtcNow;
            result = await _httpClient.PutAsJsonAsync<Comment>($"api/comment/update", Comment);
            //await Task.Delay(100);
        }
        else
        {
            Comment.PostDate = DateTime.UtcNow;
            result = await _httpClient.PostAsJsonAsync<Comment>($"api/comment/add", Comment);
        }
        if (result.IsSuccessStatusCode)
        {
            //await AlertDeBug("API Communication Success");
            await _commentsRenderTrigger.SendMessage(Constants.ComponentUpdate);
        }
        else
        {
            //await AlertDeBug("API Communication Fail");
        }
    }
    protected async Task UploadComment()
    {
        await SaveComment(CommentAction.Upload);
    }
    protected async Task EditComment()
    {
        await SaveComment(CommentAction.Eidt);
    }
    protected async Task CancelUpload()
    {
        await JSRuntime.InvokeAsync<string>("commonJsFunctions.clearEditorValue", "");
    }
    protected async Task CancelEdit()
    {
        await _commentsRenderTrigger.SendMessage(Constants.HeaderScript);
    }
    protected async Task AlertDeBug(string info)
    {
        await JSRuntime.InvokeVoidAsync("commonJsFunctions.tempAlert", info);
    }

}
