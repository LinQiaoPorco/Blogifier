@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Localization
@using System.Security.Claims
@using Blogifier.Shared
@using Blogifier.Services
@using Blogifier.Shared.Resources
@using System.Net.Http.Headers
@using System.Net.Http
@using IdentityModel

@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory
@inject IStringLocalizer<Resource> _localizer
@inject IMessageService _commentsRenderTrigger
@inject AuthenticationStateProvider _stateProvider
@inject IHttpContextAccessor _contextAccessor

<CascadingAuthenticationState>

    <AuthorizeView>
        <Authorized>
            <div class="container border-0 p-0">
                <div class="row mb-2">
                    <div class="col-1 my-auto">
                        <img src="@Avatar" class="rounded-circle mx-auto d-block float-start">
                    </div>
                    <div class="col">
                        @if (!ParentCommentId.HasValue)
                        {
                            <textarea rows="5" cols="100" id="comment-area"> </textarea>
                        }
                        else
                        {
                            <textarea rows="5" cols="100" id="@textAreaId"> </textarea>
                        }
                    </div>
                </div>
                <div class="d-grid gap-2 d-md-flex justify-content-md-end mb-2">
                    @if (Content.Length > 0)
                    {
                        <button type="button" class="btn" style="background-color: #622aff; color: #ffffff"
                        @onclick="() => EditComment()">@_localizer["edit"]</button>
                        <button type="button" class="btn btn-light" @onclick="() => CancelEdit()"
                        @onclick:preventDefault>@_localizer["cancel"]</button>
                    }
                    else
                    {
                        <button type="button" class="btn" style="background-color: #622aff; color: #ffffff"
                        @onclick="() => UploadComment()">@_localizer["comment"]</button>
                        <button type="button" class="btn btn-light" @onclick="() => CancelUpload()"
                        @onclick:preventDefault>@_localizer["cancel"]</button>
                    }
                </div>
            </div>
            <p>Content: @Content</p>
            <p>Text: @textAreaId</p>

        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Parameter] public string PostSlug { get; set; }
    [Parameter] public string Toolbar { get; set; }
    [Parameter] public int PostId { get; set; }
    [Parameter] public long? ParentCommentId { get; set; }
    [Parameter] public long? CurrentCommentId { get; set; }
    protected Comment Comment { get; set; }
    public string Avatar { get; set; }
    public ClaimsPrincipal CurrentUser { get; set; }
    private HttpClient _httpClient { get; set; }
    private string textAreaId { get; set; }
    private string Content { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await _stateProvider.GetAuthenticationStateAsync();
        CurrentUser = authState.User;
        await Load();
    }

    protected async Task Load()
    {
        _httpClient = ClientFactory.CreateClient("Local");
        if (CurrentUser.Identity.IsAuthenticated)
        {
            List<string> cookieCollection = new List<string>();
            foreach (var cookie in _contextAccessor.HttpContext.Request.Cookies)
            {
                cookieCollection.Add(cookie.Key + "=" + cookie.Value);
            }
            _httpClient.DefaultRequestHeaders.Add("Cookie", string.Join(";", string.Join(";", cookieCollection)));
        }
        Content = "";
        Comment = new Comment();
        var tempGuid = CurrentUser.FindFirstValue(JwtClaimTypes.Subject);
        var authorModel = await
        _httpClient.GetFromJsonAsync<CommentUserModel>($"api/author/partialinfobyguid/{tempGuid}");
        Avatar = authorModel.Avatar;
        if (ParentCommentId.HasValue)
        {
            textAreaId = $"comment-{ParentCommentId}";
        }
        if (CurrentCommentId.HasValue)
        {
            var tempComment = await _httpClient.GetFromJsonAsync<Comment>($"api/comment/getsingle/{CurrentCommentId}");
            Content = tempComment.CommentContent;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (ParentCommentId.HasValue)
            {
                //textAreaId = $"comment-{ParentCommentId}";
                await AlertDeBug(textAreaId);
                await JSRuntime.InvokeAsync<string>("commonJsFunctions.loadEditor", Toolbar, textAreaId);
                await JSRuntime.InvokeVoidAsync("commonJsFunctions.setTooltip");
                await JSRuntime.InvokeAsync<string>("commonJsFunctions.setEditorValue", Content, "sub");
            }
            else
            {
                await JSRuntime.InvokeAsync<string>("commonJsFunctions.loadEditor", Toolbar, "");
                await JSRuntime.InvokeVoidAsync("commonJsFunctions.setTooltip");
                await JSRuntime.InvokeAsync<string>("commonJsFunctions.setEditorValue", Content, "mian");
            }
        }
        /*
        if (ParentCommentId.HasValue)
        {
        textAreaId = $"comment-{ParentCommentId}";
        await JSRuntime.InvokeAsync<string>("commonJsFunctions.loadEditor", Toolbar, textAreaId);
        await JSRuntime.InvokeAsync<string>("commonJsFunctions.setEditorValue", Content, "sub");
        }
        else
        {
        if (firstRender)
        {
        await JSRuntime.InvokeAsync<string>("commonJsFunctions.loadEditor", Toolbar, "");
        await JSRuntime.InvokeVoidAsync("commonJsFunctions.setTooltip");
        await JSRuntime.InvokeAsync<string>("commonJsFunctions.setEditorValue", Content, "mian");
        }
        }*/
    }
    protected async Task SaveComment(CommentAction commentAction)
    {
        HttpResponseMessage result;
        if (ParentCommentId.HasValue)
        {
            Comment.CommentContent = await JSRuntime.InvokeAsync<string>("commonJsFunctions.getEditorValue", textAreaId);
        }
        else
        {
            Comment.CommentContent = await JSRuntime.InvokeAsync<string>("commonJsFunctions.getEditorValue", "main");
            await JSRuntime.InvokeAsync<string>("commonJsFunctions.clearEditorValue", "main");
        }
        Comment.PostId = PostId;
        Comment.CommentedUserId = CurrentUser.FindFirstValue(JwtClaimTypes.Subject);
        if (ParentCommentId.HasValue)
        {
            Comment.ParentId = ParentCommentId;
        }
        if (commentAction == CommentAction.Eidt)
        {
            Comment.UpdatedDate = DateTime.UtcNow;
            result = await _httpClient.PutAsJsonAsync<Comment>($"api/comment/update", Comment);
        }
        else
        {
            Comment.PostDate = DateTime.UtcNow;
            result = await _httpClient.PostAsJsonAsync<Comment>($"api/comment/add", Comment);
        }
        if (result.IsSuccessStatusCode)
        {
            await _commentsRenderTrigger.SendMessage(Constants.ComponentUpdate);
        }
        else
        {
            await AlertDeBug("API Communication Fail");
        }
    }
    protected async Task UploadComment()
    {
        await SaveComment(CommentAction.Upload);
    }
    protected async Task EditComment()
    {
        await SaveComment(CommentAction.Eidt);
    }
    protected async Task CancelUpload()
    {
        await JSRuntime.InvokeAsync<string>("commonJsFunctions.clearEditorValue", "");
    }
    protected async Task CancelEdit()
    {
        await _commentsRenderTrigger.SendMessage(Constants.HeaderScript);
    }
    protected async Task AlertDeBug(string info)
    {
        await JSRuntime.InvokeVoidAsync("commonJsFunctions.tempAlert", info);
    }

}
