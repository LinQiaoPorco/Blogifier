@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Blogifier.Shared
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory
@inject AuthenticationStateProvider BlogifierServerAuthStateProvider

<p>Text from Blazor Component</p>
<p>Slug=> @PostSlug</p>
<p>Base=> @HttpBase</p>
@if (CommentDTOs is not null)
{
    if (CommentDTOs.Count > 0)
    {
        foreach (var comment in CommentDTOs)
        {
            <p>@comment.MainComment.CommentContent</p>
        }
    }
    else
    {
        <p> No comments yet</p>
    }

}



@code {
    [Parameter] public string PostSlug { get; set; }
    private ClaimsPrincipal CurrentUser { get; set; }
    public List<CommentDTO> CommentDTOs { get; set; }
    public string HttpBase { get; set; }
    private HttpClient _http { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    protected async Task Load()
    {
        var _http = ClientFactory.CreateClient("Local");
        HttpBase = _http.BaseAddress.ToString();
        CommentDTOs = await _http.GetFromJsonAsync<List<CommentDTO>>("api/comment/" + PostSlug);
    }

}

@* <div class="col-md-12">
    <MarkdownEditor Value="@markdownValue" ValueChanged="@OnMarkdownValueChanged"
    ValueHTMLChanged="@OnMarkdownValueHTMLChanged" />

    <hr />

    <h3>Result</h3>
    @((MarkupString)markdownHtml)
    </div>

    @code {
    string markdownValue = "#Markdown Editor\nThis is a test";
    string markdownHtml;

    protected override void OnInitialized()
    {
    markdownHtml = Markdig.Markdown.ToHtml(markdownValue ?? string.Empty);
    base.OnInitialized();
    }

    Task OnMarkdownValueChanged(string value)
    {
    return Task.CompletedTask;
    }

    Task OnMarkdownValueHTMLChanged(string value)
    {
    markdownHtml = value;
    return Task.CompletedTask;
    }
    } *@